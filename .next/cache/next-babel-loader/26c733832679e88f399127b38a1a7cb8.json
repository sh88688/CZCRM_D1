{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\n\nvar fetchCall =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(url, options, type) {\n    var response;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return fetch(url, options);\n\n          case 2:\n            response = _context.sent;\n            _context.t0 = type;\n            _context.next = _context.t0 === \"text\" ? 6 : _context.t0 === \"json\" ? 7 : 8;\n            break;\n\n          case 6:\n            return _context.abrupt(\"return\", response.text());\n\n          case 7:\n            return _context.abrupt(\"return\", response.json());\n\n          case 8:\n            return _context.abrupt(\"return\", response.text());\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function fetchCall(_x, _x2, _x3) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexport default fetchCall;","map":{"version":3,"sources":["/Users/tvt/Desktop/Present/Study/React/CZCRM_D1/components/fetchCaller.js"],"names":["fetchCall","url","options","type","fetch","response","text","json"],"mappings":";;;AAAA,IAAMA,SAAS;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAG,iBAAOC,GAAP,EAAYC,OAAZ,EAAqBC,IAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEWC,KAAK,CAACH,GAAD,EAAMC,OAAN,CAFhB;;AAAA;AAENG,YAAAA,QAFM;AAAA,0BAGLF,IAHK;AAAA,4CAKL,MALK,uBAQL,MARK;AAAA;;AAAA;AAAA,6CAMDE,QAAQ,CAACC,IAAT,EANC;;AAAA;AAAA,6CASDD,QAAQ,CAACE,IAAT,EATC;;AAAA;AAAA,6CAYHF,QAAQ,CAACC,IAAT,EAZG;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAATN,SAAS;AAAA;AAAA;AAAA,GAAf;;AAgBA,eAAeA,SAAf","sourcesContent":["const fetchCall = async (url, options, type) =>\n    {\n      const response = await fetch(url, options);\n      switch(type)\n      {\n        case \"text\":\n          return response.text();\n          \n        case \"json\":\n          return response.json();  \n          \n        default :\n        return response.text();\n        \n      }\n    };\nexport default fetchCall;"]},"metadata":{},"sourceType":"module"}